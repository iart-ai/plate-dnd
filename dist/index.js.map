{"version":3,"sources":["../src/index.ts","../src/createDndPlugin.tsx","../src/components/Scroller/DndScroller.tsx","../src/dndStore.ts","../src/components/Scroller/Scroller.tsx","../src/components/Scroller/ScrollArea.tsx","../src/components/useDraggable.ts","../src/components/useWithDraggable.ts","../src/components/withDraggable.tsx","../src/hooks/useDndNode.ts","../src/hooks/useDragNode.ts","../src/hooks/useDropNode.ts","../src/transforms/onDropNode.ts","../src/utils/getHoverDirection.ts","../src/utils/getNewDirection.ts","../src/transforms/onHoverNode.ts","../src/hooks/useDragBlock.ts","../src/hooks/useDndBlock.ts","../src/hooks/useDropBlock.ts","../src/queries/getBlocksWithId.ts","../src/queries/getNodesRange.ts","../src/transforms/focusBlockStartById.ts","../src/transforms/removeBlocksAndFocus.ts","../src/transforms/selectBlockById.ts","../src/transforms/selectBlocksBySelectionOrId.ts"],"sourcesContent":["/**\n * @file Automatically generated by barrelsby.\n */\n\nexport * from './createDndPlugin';\nexport * from './dndStore';\nexport * from './types';\nexport * from './components/index';\nexport * from './hooks/index';\nexport * from './queries/index';\nexport * from './transforms/index';\nexport * from './utils/index';\n","import React from 'react';\nimport { createPluginFactory } from '@udecode/plate-common';\n\nimport { DndScroller, ScrollerProps } from './components/Scroller';\nimport { dndStore } from './dndStore';\n\nexport interface DndPlugin {\n  enableScroller?: boolean;\n  scrollerProps?: Partial<ScrollerProps>;\n}\n\nexport const KEY_DND = 'dnd';\n\nexport const createDndPlugin = createPluginFactory<DndPlugin>({\n  key: KEY_DND,\n  handlers: {\n    onDragStart: () => () => dndStore.set.isDragging(true),\n    onDragEnd: () => () => dndStore.set.isDragging(false),\n    onDrop: (editor) => () => editor.isDragging as boolean,\n  },\n  then: (editor, { options }) => ({\n    renderAfterEditable: options.enableScroller\n      ? () => <DndScroller {...options?.scrollerProps} />\n      : undefined,\n  }),\n});\n","import React from 'react';\n\nimport { dndStore } from '../../dndStore';\nimport { Scroller, ScrollerProps } from './Scroller';\n\nexport function DndScroller(props: Partial<ScrollerProps>) {\n  const isDragging = dndStore.use.isDragging();\n  const [show, setShow] = React.useState(false);\n\n  React.useEffect(() => {\n    if (isDragging) {\n      const timeout = setTimeout(() => {\n        setShow(true);\n      }, 100);\n      return () => clearTimeout(timeout);\n    }\n    setShow(false);\n  }, [isDragging, show]);\n\n  return <Scroller enabled={isDragging && show} {...props} />;\n}\n","import { createZustandStore } from '@udecode/plate-common';\n\nexport const dndStore = createZustandStore('dnd')({\n  isDragging: false,\n});\n","import React from 'react';\n\nimport { ScrollArea, ScrollAreaProps } from './ScrollArea';\n\nexport type ScrollerProps = Omit<ScrollAreaProps, 'placement'>;\n/**\n * Set up an edge scroller at the top of the page for scrolling up.\n * One at the bottom for scrolling down.\n */\nexport function Scroller(props: ScrollerProps) {\n  return (\n    <>\n      <ScrollArea placement=\"top\" {...props} />\n      <ScrollArea placement=\"bottom\" {...props} />\n    </>\n  );\n}\n","import React from 'react';\nimport throttle from 'lodash/throttle.js';\nimport raf from 'raf';\n\nconst getCoords = (e: any) => {\n  if (e.type === 'touchmove') {\n    return { x: e.changedTouches[0].clientX, y: e.changedTouches[0].clientY };\n  }\n\n  return { x: e.clientX, y: e.clientY };\n};\n\nexport interface ScrollAreaProps {\n  placement: 'top' | 'bottom';\n  enabled?: boolean;\n  height?: number;\n  zIndex?: number;\n  minStrength?: number;\n  strengthMultiplier?: number;\n  containerRef?: React.RefObject<any>;\n  scrollAreaProps?: React.HTMLAttributes<HTMLDivElement>;\n}\n\nexport function ScrollArea({\n  placement,\n  enabled = true,\n  height = 100,\n  zIndex = 10_000,\n  minStrength = 0.15,\n  strengthMultiplier = 25,\n  containerRef,\n  scrollAreaProps,\n}: ScrollAreaProps) {\n  const ref = React.useRef<HTMLDivElement>();\n\n  const scaleYRef = React.useRef(0);\n  const frameRef = React.useRef<number | null>(null);\n\n  const direction = placement === 'top' ? -1 : 1;\n\n  // Drag a fixed, invisible box of custom height at the top, and bottom\n  // of the window. Make sure to show it only when dragging something.\n  const style: React.CSSProperties = {\n    position: 'fixed',\n    height,\n    width: '100%',\n    opacity: 0,\n    zIndex,\n    ...scrollAreaProps?.style,\n  };\n\n  if (placement === 'top') {\n    style.top = 0;\n  } else if (placement === 'bottom') {\n    style.bottom = 0;\n  }\n\n  const stopScrolling = () => {\n    scaleYRef.current = 0;\n\n    if (frameRef.current) {\n      raf.cancel(frameRef.current);\n      frameRef.current = null;\n    }\n  };\n\n  const startScrolling = () => {\n    const tick = () => {\n      const scaleY = scaleYRef.current;\n\n      // stop scrolling if there's nothing to do\n      if (strengthMultiplier === 0 || scaleY === 0) {\n        stopScrolling();\n        return;\n      }\n\n      const container = containerRef?.current ?? window;\n      container.scrollBy(0, scaleY * strengthMultiplier * direction);\n\n      frameRef.current = raf(tick);\n\n      // there's a bug in safari where it seems like we can't get\n      // mousemove events from a container that also emits a scroll\n      // event that same frame. So we should double the strengthMultiplier and only adjust\n      // the scroll position at 30fps\n    };\n\n    tick();\n  };\n\n  // Update scaleY every 100ms or so\n  // and start scrolling if necessary\n  const updateScrolling = throttle(\n    (e) => {\n      const container = ref.current;\n      if (!container) return;\n\n      const { top: y, height: h } = container.getBoundingClientRect();\n      const coords = getCoords(e);\n\n      const strength = Math.max(Math.max(coords.y - y, 0) / h, minStrength);\n\n      // calculate strength\n      scaleYRef.current = direction === -1 ? 1 - strength : strength;\n\n      // start scrolling if we need to\n      if (!frameRef.current && scaleYRef.current) {\n        startScrolling();\n      }\n    },\n    100,\n    { trailing: false }\n  );\n\n  const handleEvent = (e: any) => {\n    updateScrolling(e);\n  };\n\n  React.useEffect(() => {\n    if (!enabled) {\n      stopScrolling();\n    }\n  }, [enabled]);\n\n  if (!enabled) return null;\n\n  // Hide the element if not enabled, so it doesn't interfere with clicking things under it.\n  return (\n    <div\n      ref={ref as any}\n      style={style}\n      onDragOver={handleEvent}\n      onDragLeave={stopScrolling}\n      onDragEnd={stopScrolling}\n      // touchmove events don't seem to work across siblings, so we unfortunately\n      // would have to attach the listeners to the body\n      onTouchMove={handleEvent}\n      {...scrollAreaProps}\n    />\n  );\n}\n","import React from 'react';\nimport { TEditor, TElement } from '@udecode/plate-common';\nimport { ConnectDragSource, DropTargetMonitor } from 'react-dnd';\n\nimport { DragItemNode, DropLineDirection, useDndBlock } from '..';\n\nexport type DraggableState = {\n  dropLine: DropLineDirection;\n  isHovered: boolean;\n  setIsHovered: (isHovered: boolean) => void;\n  isDragging: boolean;\n  nodeRef: React.RefObject<HTMLDivElement>;\n  dragRef: ConnectDragSource;\n};\n\nexport const useDraggableState = (props: {\n  element: TElement;\n  onDropHandler?: (\n    editor: TEditor,\n    props: {\n      monitor: DropTargetMonitor<DragItemNode, unknown>;\n      dragItem: DragItemNode;\n      nodeRef: any;\n      id: string;\n    }\n  ) => boolean;\n}): DraggableState => {\n  const { element, onDropHandler } = props;\n\n  const nodeRef = React.useRef<HTMLDivElement>(null);\n  const [isHovered, setIsHovered] = React.useState(false);\n  const { dropLine, isDragging, dragRef } = useDndBlock({\n    id: element.id as string,\n    nodeRef,\n    onDropHandler,\n  });\n\n  return {\n    dropLine,\n    isHovered,\n    setIsHovered,\n    isDragging,\n    nodeRef,\n    dragRef,\n  };\n};\n\nexport const useDraggable = (state: DraggableState) => {\n  return {\n    previewRef: state.nodeRef,\n    handleRef: state.dragRef,\n    groupProps: {\n      onPointerEnter: () => state.setIsHovered(true),\n      onPointerLeave: () => state.setIsHovered(false),\n    },\n    droplineProps: {\n      contentEditable: false,\n    },\n    gutterLeftProps: {\n      contentEditable: false,\n    },\n  };\n};\n","import React from 'react';\nimport {\n  findNodePath,\n  PlateRenderElementProps,\n  TEditor,\n} from '@udecode/plate-common';\nimport { Path } from 'slate';\nimport { useReadOnly } from 'slate-react';\n\nexport interface WithDraggableOptions<T = any> {\n  /**\n   * Document level where dnd is enabled. 0 = root blocks, 1 = first level of children, etc.\n   * Set to null to allow all levels.\n   * @default 0\n   */\n  level?: number | null;\n\n  /**\n   * Filter out elements that can't be dragged.\n   */\n  filter?: (editor: TEditor, path: Path) => boolean;\n\n  /**\n   * Enables dnd in read-only.\n   */\n  allowReadOnly?: boolean;\n  draggableProps?: T;\n}\n\nexport const useWithDraggable = <T = any>({\n  editor,\n  level = 0,\n  filter,\n  element,\n  allowReadOnly = false,\n  draggableProps,\n}: WithDraggableOptions<T> & PlateRenderElementProps) => {\n  const readOnly = useReadOnly();\n  const path = React.useMemo(\n    () => findNodePath(editor, element),\n    [editor, element]\n  );\n\n  const filteredOut = React.useMemo(\n    () =>\n      path &&\n      ((Number.isInteger(level) && level !== path.length - 1) ||\n        (filter && filter(editor, path))),\n    [path, level, filter, editor]\n  );\n\n  return {\n    disabled: filteredOut || (!allowReadOnly && readOnly),\n    draggableProps: {\n      editor,\n      element,\n      ...draggableProps,\n    },\n  };\n};\n","import React from 'react';\nimport { AnyObject, PlateRenderElementProps } from '@udecode/plate-common';\n\nimport { useWithDraggable, WithDraggableOptions } from './useWithDraggable';\n\nexport const withDraggable = <T extends AnyObject = AnyObject>(\n  Draggable: React.FC<any>,\n  Component: React.FC<any>,\n  options?: WithDraggableOptions<T>\n) =>\n  // eslint-disable-next-line react/display-name\n  React.forwardRef<HTMLDivElement, PlateRenderElementProps>((props, ref) => {\n    const { disabled, draggableProps } = useWithDraggable({\n      ...options,\n      ...props,\n    });\n\n    if (disabled) {\n      return <Component {...props} />;\n    }\n\n    return (\n      <Draggable ref={ref} {...draggableProps}>\n        <Component {...props} />\n      </Draggable>\n    );\n  });\n","import React from 'react';\nimport { TEditor, useEditorRef } from '@udecode/plate-common';\nimport { DropTargetMonitor } from 'react-dnd';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\n\nimport { DragItemNode, DropLineDirection } from '../types';\nimport { useDragNode, UseDragNodeOptions } from './useDragNode';\nimport { useDropNode, UseDropNodeOptions } from './useDropNode';\n\nexport interface UseDndNodeOptions\n  extends Pick<UseDropNodeOptions, 'id' | 'nodeRef'>,\n    Pick<UseDragNodeOptions, 'type'> {\n  drag?: UseDragNodeOptions;\n  drop?: UseDropNodeOptions;\n  onDropHandler?: (\n    editor: TEditor,\n    props: {\n      monitor: DropTargetMonitor<DragItemNode, unknown>;\n      dragItem: DragItemNode;\n      nodeRef: any;\n      id: string;\n    }\n  ) => boolean;\n  preview?: {\n    /**\n     * Whether to disable the preview.\n     */\n    disable?: boolean;\n\n    /**\n     * The reference to the preview element.\n     */\n    ref?: any;\n  };\n}\n\n/**\n * {@link useDragNode} and {@link useDropNode} hooks to drag and drop a node from the editor.\n * A default preview is used to show the node being dragged, which can be customized or removed.\n * Returns the drag ref and drop line direction.\n */\nexport const useDndNode = ({\n  id,\n  type,\n  nodeRef,\n  preview: previewOptions = {},\n  drag: dragOptions,\n  drop: dropOptions,\n  onDropHandler,\n}: UseDndNodeOptions) => {\n  const editor = useEditorRef();\n\n  const [dropLine, setDropLine] = React.useState<DropLineDirection>('');\n\n  const [{ isDragging }, dragRef, preview] = useDragNode(editor, {\n    id,\n    type,\n    ...dragOptions,\n  });\n  const [{ isOver }, drop] = useDropNode(editor, {\n    accept: type,\n    id,\n    nodeRef,\n    dropLine,\n    onChangeDropLine: setDropLine,\n    onDropHandler,\n    ...dropOptions,\n  });\n\n  if (previewOptions.disable) {\n    drop(nodeRef);\n    preview(getEmptyImage(), { captureDraggingState: true });\n  } else if (previewOptions.ref) {\n    drop(nodeRef);\n    preview(previewOptions.ref);\n  } else {\n    preview(drop(nodeRef));\n  }\n\n  if (!isOver && dropLine) {\n    setDropLine('');\n  }\n\n  return {\n    isDragging,\n    isOver,\n    dropLine,\n    dragRef,\n  };\n};\n","import { TEditor, Value } from '@udecode/plate-common';\nimport { DragSourceHookSpec, useDrag } from 'react-dnd';\n\nimport { dndStore } from '../dndStore';\nimport { DragItemNode } from '../types';\n\nexport interface UseDragNodeOptions\n  extends DragSourceHookSpec<DragItemNode, unknown, { isDragging: boolean }> {\n  id: string;\n}\n\n/**\n * `useDrag` hook to drag a node from the editor. `item` with `id` is required.\n *\n * On drag start:\n * - set `editor.isDragging` to true\n * - add `dragging` class to `body`\n *\n * On drag end:\n * - set `editor.isDragging` to false\n * - remove `dragging` class to `body`\n *\n * Collect:\n * - isDragging: true if mouse is dragging the block\n */\nexport const useDragNode = <V extends Value>(\n  editor: TEditor<V>,\n  { id, item, ...options }: UseDragNodeOptions\n) => {\n  return useDrag<DragItemNode, unknown, { isDragging: boolean }>(\n    () => ({\n      item(monitor) {\n        dndStore.set.isDragging(true);\n        editor.isDragging = true;\n        document.body.classList.add('dragging');\n\n        const _item = typeof item === 'function' ? item(monitor) : item;\n\n        return {\n          id,\n          editorId: editor.id,\n          ..._item,\n        };\n      },\n      collect: (monitor) => ({\n        isDragging: monitor.isDragging(),\n      }),\n      end: () => {\n        dndStore.set.isDragging(false);\n        editor.isDragging = false;\n        document.body.classList.remove('dragging');\n      },\n      ...options,\n    }),\n    []\n  );\n};\n","import { TEditor, TReactEditor, Value } from '@udecode/plate-common';\nimport { DropTargetHookSpec, DropTargetMonitor, useDrop } from 'react-dnd';\n\nimport { onDropNode } from '../transforms/onDropNode';\nimport { onHoverNode } from '../transforms/onHoverNode';\nimport { DragItemNode, DropLineDirection } from '../types';\n\nexport interface UseDropNodeOptions\n  extends DropTargetHookSpec<DragItemNode, unknown, { isOver: boolean }> {\n  /**\n   * The reference to the node being dragged.\n   */\n  nodeRef: any;\n\n  /**\n   * Id of the node.\n   */\n  id: string;\n\n  /**\n   * Current value of dropLine.\n   */\n  dropLine: string;\n\n  /**\n   * Callback called on dropLine change.\n   */\n  onChangeDropLine: (newValue: DropLineDirection) => void;\n  /**\n   * Intercepts the drop handling.\n   * If `false` is returned, the default drop behavior is called after.\n   * If `true` is returned, the default behavior is not called.\n   */\n  onDropHandler?: (\n    editor: TEditor,\n    props: {\n      monitor: DropTargetMonitor<DragItemNode, unknown>;\n      dragItem: DragItemNode;\n      nodeRef: any;\n      id: string;\n    }\n  ) => boolean;\n}\n\n/**\n * `useDrop` hook to drop a node on the editor.\n *\n * On drop:\n * - get hover direction (top, bottom or undefined), return early if undefined\n * - dragPath: find node with id = dragItem.id, return early if not found\n * - focus editor\n * - dropPath: find node with id = id, its path should be next (bottom) or previous (top)\n * - move node from dragPath to dropPath\n *\n * On hover:\n * - get drop line direction\n * - if differs from dropLine, setDropLine is called\n *\n * Collect:\n * - isOver: true if mouse is over the block\n */\nexport const useDropNode = <V extends Value>(\n  editor: TReactEditor<V>,\n  {\n    nodeRef,\n    id,\n    dropLine,\n    onChangeDropLine,\n    onDropHandler,\n    ...options\n  }: UseDropNodeOptions\n) => {\n  return useDrop<DragItemNode, unknown, { isOver: boolean }>({\n    drop: (dragItem, monitor) => {\n      const handled =\n        !!onDropHandler &&\n        onDropHandler(editor, {\n          nodeRef,\n          id,\n          dragItem,\n          monitor,\n        });\n\n      if (handled) return;\n\n      onDropNode(editor, { nodeRef, id, dragItem, monitor });\n    },\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n    }),\n    hover(item: DragItemNode, monitor: DropTargetMonitor) {\n      onHoverNode(editor, {\n        nodeRef,\n        id,\n        dropLine,\n        onChangeDropLine,\n        dragItem: item,\n        monitor,\n      });\n    },\n    ...options,\n  });\n};\n","import {\n  findNode,\n  focusEditor,\n  moveNodes,\n  TReactEditor,\n  Value,\n} from '@udecode/plate-common';\nimport { DropTargetMonitor } from 'react-dnd';\nimport { Path } from 'slate';\n\nimport { UseDropNodeOptions } from '../hooks';\nimport { DragItemNode } from '../types';\nimport { getHoverDirection } from '../utils';\n\n/**\n * Callback called on drag an drop a node with id.\n */\nexport const onDropNode = <V extends Value>(\n  editor: TReactEditor<V>,\n  {\n    dragItem,\n    monitor,\n    nodeRef,\n    id,\n  }: {\n    dragItem: DragItemNode;\n    monitor: DropTargetMonitor;\n  } & Pick<UseDropNodeOptions, 'nodeRef' | 'id'>\n) => {\n  const direction = getHoverDirection({ dragItem, monitor, nodeRef, id });\n  if (!direction) return;\n\n  const dragEntry = findNode(editor, {\n    at: [],\n    match: { id: dragItem.id },\n  });\n  if (!dragEntry) return;\n  const [, dragPath] = dragEntry;\n\n  focusEditor(editor);\n\n  let dropPath: Path | undefined;\n  if (direction === 'bottom') {\n    dropPath = findNode(editor, { at: [], match: { id } })?.[1];\n    if (!dropPath) return;\n\n    if (Path.equals(dragPath, Path.next(dropPath))) return;\n  }\n\n  if (direction === 'top') {\n    const nodePath = findNode(editor, { at: [], match: { id } })?.[1];\n\n    if (!nodePath) return;\n    dropPath = [...nodePath.slice(0, -1), nodePath.at(-1)! - 1];\n\n    if (Path.equals(dragPath, dropPath)) return;\n  }\n\n  if (direction) {\n    const _dropPath = dropPath as Path;\n\n    const before =\n      Path.isBefore(dragPath, _dropPath) && Path.isSibling(dragPath, _dropPath);\n    const to = before ? _dropPath : Path.next(_dropPath);\n\n    moveNodes(editor, {\n      at: dragPath,\n      to,\n    });\n  }\n};\n","import { DropTargetMonitor, XYCoord } from 'react-dnd';\n\nimport { DragItemNode, DropDirection } from '../types';\n\nexport interface GetHoverDirectionOptions {\n  dragItem: DragItemNode;\n\n  monitor: DropTargetMonitor;\n\n  /**\n   * The node ref of the node being dragged.\n   */\n  nodeRef: any;\n\n  /**\n   * Hovering node id.\n   */\n  id: string;\n}\n\n/**\n * If dragging a node A over another node B:\n * get the direction of node A relative to node B.\n */\nexport const getHoverDirection = ({\n  dragItem,\n  id,\n  monitor,\n  nodeRef,\n}: GetHoverDirectionOptions): DropDirection => {\n  if (!nodeRef.current) return;\n\n  const dragId = dragItem.id;\n\n  // Don't replace items with themselves\n  if (dragId === id) return;\n\n  // Determine rectangle on screen\n  const hoverBoundingRect = nodeRef.current?.getBoundingClientRect();\n\n  // Get vertical middle\n  const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n\n  // Determine mouse position\n  const clientOffset = monitor.getClientOffset();\n  if (!clientOffset) return;\n\n  // Get pixels to the top\n  const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top;\n\n  // Only perform the move when the mouse has crossed half of the items height\n  // When dragging downwards, only move when the cursor is below 50%\n  // When dragging upwards, only move when the cursor is above 50%\n\n  // Dragging downwards\n  // if (dragId < hoverId && hoverClientY < hoverMiddleY) {\n  if (hoverClientY < hoverMiddleY) {\n    return 'top';\n  }\n\n  // Dragging upwards\n  // if (dragId > hoverId && hoverClientY > hoverMiddleY) {\n  if (hoverClientY >= hoverMiddleY) {\n    return 'bottom';\n  }\n};\n","/**\n * Get new direction if updated\n */\nimport { DropLineDirection } from '../types';\n\nexport const getNewDirection = (\n  previousDir: string,\n  dir?: string\n): DropLineDirection | undefined => {\n  if (!dir && previousDir) {\n    return '';\n  }\n\n  if (dir === 'top' && previousDir !== 'top') {\n    return 'top';\n  }\n\n  if (dir === 'bottom' && previousDir !== 'bottom') {\n    return 'bottom';\n  }\n};\n","import {\n  collapseSelection,\n  focusEditor,\n  isExpanded,\n  TReactEditor,\n  Value,\n} from '@udecode/plate-common';\nimport { DropTargetMonitor } from 'react-dnd';\n\nimport { UseDropNodeOptions } from '../hooks/useDropNode';\nimport { DragItemNode } from '../types';\nimport { getHoverDirection, getNewDirection } from '../utils';\n\n/**\n * Callback called when dragging a node and hovering nodes.\n */\nexport const onHoverNode = <V extends Value>(\n  editor: TReactEditor<V>,\n  {\n    dragItem,\n    monitor,\n    nodeRef,\n    onChangeDropLine,\n    dropLine,\n    id,\n  }: {\n    dragItem: DragItemNode;\n    monitor: DropTargetMonitor;\n  } & Pick<\n    UseDropNodeOptions,\n    'nodeRef' | 'onChangeDropLine' | 'id' | 'dropLine'\n  >\n) => {\n  const direction = getHoverDirection({\n    dragItem,\n    monitor,\n    nodeRef,\n    id,\n  });\n  const dropLineDir = getNewDirection(dropLine, direction);\n  if (dropLineDir) onChangeDropLine(dropLineDir);\n\n  if (direction && isExpanded(editor.selection)) {\n    focusEditor(editor);\n    collapseSelection(editor);\n  }\n};\n","import { TEditor, Value } from '@udecode/plate-common';\n\nimport { useDragNode } from './useDragNode';\n\nexport const DRAG_ITEM_BLOCK = 'block';\n\n/**\n * {@link useDragNode}\n */\nexport const useDragBlock = <V extends Value>(editor: TEditor<V>, id: string) =>\n  useDragNode<V>(editor, {\n    id,\n    type: DRAG_ITEM_BLOCK,\n  });\n","import { WithPartial } from '@udecode/plate-common';\n\nimport { useDndNode, UseDndNodeOptions } from './useDndNode';\nimport { DRAG_ITEM_BLOCK } from './useDragBlock';\n\n/**\n * {@link useDndNode}\n */\nexport const useDndBlock = (options: WithPartial<UseDndNodeOptions, 'type'>) =>\n  useDndNode({\n    type: DRAG_ITEM_BLOCK,\n    ...options,\n  });\n","import { TReactEditor, Value } from '@udecode/plate-common';\n\nimport { DRAG_ITEM_BLOCK } from './useDragBlock';\nimport { useDropNode, UseDropNodeOptions } from './useDropNode';\n\n/**\n * {@link useDropNode}\n */\nexport const useDropBlock = <V extends Value>(\n  editor: TReactEditor<V>,\n  options: Omit<UseDropNodeOptions, 'accept'>\n) => useDropNode(editor, { accept: DRAG_ITEM_BLOCK, ...options });\n","import {\n  getNodeEntries,\n  GetNodeEntriesOptions,\n  isBlock,\n  TEditor,\n  Value,\n} from '@udecode/plate-common';\n\n/**\n * Get blocks with an id\n */\nexport const getBlocksWithId = <V extends Value>(\n  editor: TEditor<V>,\n  options: GetNodeEntriesOptions<V>\n) => {\n  const _nodes = getNodeEntries(editor, {\n    match: (n) => isBlock(editor, n) && !!n.id,\n    ...options,\n  });\n  return Array.from(_nodes);\n};\n","import { getRange, TEditor, TNodeEntry, Value } from '@udecode/plate-common';\n\n/**\n * Get node entries range.\n */\nexport const getNodesRange = <V extends Value>(\n  editor: TEditor<V>,\n  nodeEntries: TNodeEntry[]\n) => {\n  if (nodeEntries.length === 0) return;\n\n  const firstBlockPath = nodeEntries[0][1];\n  const lastBlockPath = nodeEntries.at(-1)![1];\n\n  return getRange(editor, firstBlockPath, lastBlockPath);\n};\n","import {\n  findNode,\n  focusEditor,\n  getStartPoint,\n  select,\n  TReactEditor,\n  Value,\n} from '@udecode/plate-common';\n\n/**\n * Select the start of a block by id and focus the editor.\n */\nexport const focusBlockStartById = <V extends Value>(\n  editor: TReactEditor<V>,\n  id: string\n) => {\n  const path = findNode(editor, { at: [], match: { id } })?.[1];\n  if (!path) return;\n\n  select(editor, getStartPoint(editor, path));\n  focusEditor(editor);\n};\n","import {\n  focusEditor,\n  GetNodeEntriesOptions,\n  removeNodes,\n  TReactEditor,\n  unhangRange,\n  Value,\n} from '@udecode/plate-common';\n\nimport { getBlocksWithId } from '../queries/getBlocksWithId';\nimport { getNodesRange } from '../queries/getNodesRange';\n\n/**\n * Remove blocks with an id and focus the editor.\n */\nexport const removeBlocksAndFocus = <V extends Value>(\n  editor: TReactEditor<V>,\n  options: GetNodeEntriesOptions<V>\n) => {\n  unhangRange(editor, options?.at, options);\n\n  const nodeEntries = getBlocksWithId(editor, options);\n\n  removeNodes(editor, { at: getNodesRange(editor, nodeEntries) });\n  focusEditor(editor);\n};\n","import {\n  findNode,\n  focusEditor,\n  getRange,\n  select,\n  TReactEditor,\n  Value,\n} from '@udecode/plate-common';\n\n/**\n * Select the block above the selection by id and focus the editor.\n */\nexport const selectBlockById = <V extends Value>(\n  editor: TReactEditor<V>,\n  id: string\n) => {\n  const path = findNode(editor, { at: [], match: { id } })?.[1];\n  if (!path) return;\n\n  select(editor, getRange(editor, path));\n  focusEditor(editor);\n};\n","import { focusEditor, PlateEditor, select, Value } from '@udecode/plate-common';\nimport { Range } from 'slate';\n\nimport { getBlocksWithId } from '../queries/getBlocksWithId';\nimport { getNodesRange } from '../queries/getNodesRange';\nimport { selectBlockById } from './selectBlockById';\n\n/**\n * Select blocks by selection or by id.\n * If the block with id is not selected, select the block with id.\n * Else, select the blocks above the selection.\n */\nexport const selectBlocksBySelectionOrId = <V extends Value>(\n  editor: PlateEditor<V>,\n  id: string\n) => {\n  if (!editor.selection) return;\n\n  const blockEntries = getBlocksWithId(editor, { at: editor.selection });\n  const isBlockSelected = blockEntries.some(\n    (blockEntry) => blockEntry[0].id === id\n  );\n\n  if (isBlockSelected) {\n    select(editor, getNodesRange(editor, blockEntries) as Range);\n    focusEditor(editor);\n  } else {\n    selectBlockById(editor, id);\n  }\n};\n"],"mappings":"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","names":["import_react","import_plate_common","import_react","import_react","React","raf","throttle","React","React","React","import_react","React","import_react","import_plate_common","React","import_react","React","import_react","import_plate_common","import_react_dnd","import_plate_common","import_plate_common","React","import_plate_common","import_plate_common","import_plate_common","import_plate_common","import_plate_common","import_plate_common"]}