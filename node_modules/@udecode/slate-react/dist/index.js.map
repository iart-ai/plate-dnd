{"version":3,"sources":["../src/index.ts","../src/react-editor/blurEditor.ts","../src/react-editor/deselectEditor.ts","../src/react-editor/findEditorDocumentOrShadowRoot.ts","../src/react-editor/findEventRange.ts","../src/react-editor/findNodeKey.ts","../src/react-editor/findNodePath.ts","../src/react-editor/focusEditor.ts","../src/react-editor/getEditorWindow.ts","../src/react-editor/hasEditorDOMNode.ts","../src/react-editor/hasEditorEditableTarget.ts","../src/react-editor/hasEditorSelectableTarget.ts","../src/react-editor/hasEditorTarget.ts","../src/react-editor/insertData.ts","../src/react-editor/isComposing.ts","../src/react-editor/isEditorFocused.ts","../src/react-editor/isEditorReadOnly.ts","../src/react-editor/isTargetInsideNonReadonlyVoidEditor.ts","../src/react-editor/setFragmentData.ts","../src/react-editor/toDOMNode.ts","../src/react-editor/toDOMPoint.ts","../src/react-editor/toDOMRange.ts","../src/react-editor/toSlateNode.ts","../src/react-editor/toSlatePoint.ts","../src/react-editor/toSlateRange.ts","../src/utils/focusEditorEdge.ts"],"sourcesContent":["/**\n * @file Automatically generated by barrelsby.\n */\n\nexport * from './react-editor/index';\nexport * from './types/index';\nexport * from './utils/index';\n","import { Value } from '@udecode/slate';\nimport { ReactEditor } from 'slate-react';\n\nimport { TReactEditor } from '../types/TReactEditor';\n\n/**\n * Blur the editor.\n */\nexport const blurEditor = <V extends Value>(editor: TReactEditor<V>) =>\n  ReactEditor.blur(editor as any);\n","import { Value } from '@udecode/slate';\nimport { ReactEditor } from 'slate-react';\n\nimport { TReactEditor } from '../types/TReactEditor';\n\n/**\n * Deselect the editor.\n */\nexport const deselectEditor = <V extends Value>(editor: TReactEditor<V>) =>\n  ReactEditor.deselect(editor as any);\n","import { Value } from '@udecode/slate';\nimport { ReactEditor } from 'slate-react';\n\nimport { TReactEditor } from '../types/TReactEditor';\n\n/**\n * Find the DOM node that implements DocumentOrShadowRoot for the editor.\n */\nexport const findEditorDocumentOrShadowRoot = <V extends Value>(\n  editor: TReactEditor<V>\n) => {\n  try {\n    return ReactEditor.findDocumentOrShadowRoot(editor as any);\n  } catch (error) {}\n};\n","import { Value } from '@udecode/slate';\nimport { ReactEditor } from 'slate-react';\n\nimport { TReactEditor } from '../types/TReactEditor';\n\n/**\n * {@link ReactEditor.findEventRange}\n */\nexport const findEventRange = <V extends Value>(\n  editor: TReactEditor<V>,\n  event: any\n) => {\n  try {\n    return ReactEditor.findEventRange(editor as any, event);\n  } catch (error) {}\n};\n","import { TNode, Value } from '@udecode/slate';\nimport { ReactEditor } from 'slate-react';\n\nimport { TReactEditor } from '../types/TReactEditor';\n\n/**\n * Find a key for a Slate node.\n */\nexport const findNodeKey = <V extends Value>(\n  editor: TReactEditor<V>,\n  node: TNode\n) => {\n  try {\n    return ReactEditor.findKey(editor as any, node);\n  } catch (error) {}\n};\n","import { TNode, Value } from '@udecode/slate';\nimport { Path } from 'slate';\nimport { ReactEditor } from 'slate-react';\n\nimport { TReactEditor } from '../types/TReactEditor';\n\n/**\n * Find the path of Slate node.\n */\nexport const findNodePath = <V extends Value>(\n  editor: TReactEditor<V>,\n  node: TNode\n): Path | undefined => {\n  try {\n    return ReactEditor.findPath(editor as any, node);\n  } catch (error) {}\n};\n","import { deselect, select, Value, withoutNormalizing } from '@udecode/slate';\nimport { Location } from 'slate';\nimport { ReactEditor } from 'slate-react';\n\nimport { TReactEditor } from '../types/TReactEditor';\n\n/**\n * Focus the editor. Extension:\n *\n * If `target` is defined:\n * - deselect the editor (otherwise it will focus the start of the editor)\n * - select the editor\n * - focus the editor\n */\nexport const focusEditor = <V extends Value>(\n  editor: TReactEditor<V>,\n  target?: Location\n) => {\n  if (target) {\n    withoutNormalizing(editor, () => {\n      deselect(editor);\n      select(editor, target);\n    });\n  }\n\n  // From slate-react 0.99.0, setTimeout is mandatory to focus the editor after a transform.\n  // setTimeout(() => {\n  ReactEditor.focus(editor as any);\n  // }, 0);\n};\n","import { Value } from '@udecode/slate';\nimport { ReactEditor } from 'slate-react';\n\nimport { TReactEditor } from '../types/TReactEditor';\n\n/**\n * Return the host window of the current editor.\n */\nexport const getEditorWindow = <V extends Value>(editor: TReactEditor<V>) => {\n  try {\n    return ReactEditor.getWindow(editor as any);\n  } catch (error) {}\n};\n","import { Value } from '@udecode/slate';\nimport { ReactEditor } from 'slate-react';\nimport { DOMNode } from 'slate-react/dist/utils/dom';\n\nimport { TReactEditor } from '../types/TReactEditor';\n\n/**\n * Check if a DOM node is within the editor.\n */\nexport const hasEditorDOMNode = <V extends Value>(\n  editor: TReactEditor<V>,\n  target: DOMNode,\n  options?: Parameters<typeof ReactEditor.hasDOMNode>[2]\n) => {\n  try {\n    return ReactEditor.hasDOMNode(editor as any, target, options);\n  } catch (error) {}\n\n  return false;\n};\n","import { Value } from '@udecode/slate';\nimport { ReactEditor } from 'slate-react';\n\nimport { TReactEditor } from '../types/TReactEditor';\n\n/**\n * Check if the target is editable and in the editor.\n */\nexport const hasEditorEditableTarget = <V extends Value>(\n  editor: TReactEditor<V>,\n  target: EventTarget | null\n): target is Node => {\n  try {\n    return ReactEditor.hasEditableTarget(editor as any, target);\n  } catch (error) {}\n\n  return false;\n};\n","import { Value } from '@udecode/slate';\nimport { ReactEditor } from 'slate-react';\n\nimport { TReactEditor } from '../types/TReactEditor';\n\n/**\n * Check if the target can be selectable.\n */\nexport const hasEditorSelectableTarget = <V extends Value>(\n  editor: TReactEditor<V>,\n  target: EventTarget | null\n) => {\n  try {\n    return ReactEditor.hasSelectableTarget(editor as any, target);\n  } catch (error) {}\n\n  return false;\n};\n","import { Value } from '@udecode/slate';\nimport { ReactEditor } from 'slate-react';\n\nimport { TReactEditor } from '../types/TReactEditor';\n\n/**\n * Check if the target is in the editor.\n */\nexport const hasEditorTarget = <V extends Value>(\n  editor: TReactEditor<V>,\n  target: EventTarget | null\n): target is Node => {\n  try {\n    return ReactEditor.hasTarget(editor as any, target);\n  } catch (error) {}\n\n  return false;\n};\n","import { Value } from '@udecode/slate';\nimport { ReactEditor } from 'slate-react';\n\nimport { TReactEditor } from '../types/TReactEditor';\n\n/**\n * Insert data from a `DataTransfer` into the editor.\n */\nexport const insertData = <V extends Value>(\n  editor: TReactEditor<V>,\n  data: DataTransfer\n) => ReactEditor.insertData(editor as any, data);\n","import { Value } from '@udecode/slate';\nimport { ReactEditor } from 'slate-react';\n\nimport { TReactEditor } from '../types/TReactEditor';\n\n/**\n * Check if the user is currently composing inside the editor.\n */\nexport const isComposing = <V extends Value>(editor: TReactEditor<V>) =>\n  ReactEditor.isComposing(editor as any);\n","import { Value } from '@udecode/slate';\nimport { ReactEditor } from 'slate-react';\n\nimport { TReactEditor } from '../types/TReactEditor';\n\n/**\n * Check if the editor is focused.\n */\nexport const isEditorFocused = <V extends Value>(editor: TReactEditor<V>) =>\n  ReactEditor.isFocused(editor as any);\n","import { Value } from '@udecode/slate';\nimport { ReactEditor } from 'slate-react';\n\nimport { TReactEditor } from '../types/TReactEditor';\n\n/**\n * Check if the editor is in read-only mode.\n */\nexport const isEditorReadOnly = <V extends Value>(editor: TReactEditor<V>) =>\n  ReactEditor.isReadOnly(editor as any);\n","import { Value } from '@udecode/slate';\nimport { ReactEditor } from 'slate-react';\n\nimport { TReactEditor } from '../types/TReactEditor';\n\n/**\n * Check if the target is inside void and in an non-readonly editor.\n */\nexport const isTargetInsideNonReadonlyVoid = <V extends Value>(\n  editor: TReactEditor<V>,\n  target: EventTarget | null\n) => {\n  try {\n    return ReactEditor.isTargetInsideNonReadonlyVoid(editor as any, target);\n  } catch (error) {}\n\n  return false;\n};\n","import { Value } from '@udecode/slate';\nimport { ReactEditor } from 'slate-react';\n\nimport { TReactEditor } from '../types/TReactEditor';\n\n/**\n * Sets data from the currently selected fragment on a `DataTransfer`.\n */\nexport const setFragmentData = <V extends Value>(\n  editor: TReactEditor<V>,\n  data: DataTransfer\n) => ReactEditor.setFragmentData(editor as any, data);\n","import { TNode, Value } from '@udecode/slate';\nimport { ReactEditor } from 'slate-react';\n\nimport { TReactEditor } from '../types/TReactEditor';\n\n/**\n * Find the native DOM element from a Slate node.\n */\nexport const toDOMNode = <V extends Value>(\n  editor: TReactEditor<V>,\n  node: TNode\n) => {\n  try {\n    return ReactEditor.toDOMNode(editor as any, node);\n  } catch (error) {}\n};\n","import { Value } from '@udecode/slate';\nimport { Point } from 'slate';\nimport { ReactEditor } from 'slate-react';\n\nimport { TReactEditor } from '../types/TReactEditor';\n\n/**\n * Find a native DOM selection point from a Slate point.\n */\nexport const toDOMPoint = <V extends Value>(\n  editor: TReactEditor<V>,\n  point: Point\n) => {\n  try {\n    return ReactEditor.toDOMPoint(editor as any, point);\n  } catch (error) {}\n};\n","import { Value } from '@udecode/slate/dist';\nimport { Range } from 'slate';\nimport { ReactEditor } from 'slate-react';\n\nimport { TReactEditor } from '../types/TReactEditor';\n\n/**\n * {@link ReactEditor.toDOMRange}\n */\nexport const toDOMRange = <V extends Value>(\n  editor: TReactEditor<V>,\n  range: Range\n) => {\n  try {\n    return ReactEditor.toDOMRange(editor as any, range);\n  } catch (error) {}\n};\n","import { TNode, Value } from '@udecode/slate';\nimport { ReactEditor } from 'slate-react';\nimport { DOMNode } from 'slate-react/dist/utils/dom';\n\nimport { TReactEditor } from '../types/TReactEditor';\n\n/**\n * {@link ReactEditor.toSlateNode}\n */\nexport const toSlateNode = <V extends Value>(\n  editor: TReactEditor<V>,\n  domNode: DOMNode\n) => {\n  try {\n    return ReactEditor.toSlateNode(editor as any, domNode) as TNode;\n  } catch (error) {}\n};\n","import { Value } from '@udecode/slate';\nimport { ReactEditor } from 'slate-react';\nimport { DOMPoint } from 'slate-react/dist/utils/dom';\n\nimport { TReactEditor } from '../types/TReactEditor';\n\n/**\n * {@link ReactEditor.toSlatePoint}\n */\nexport const toSlatePoint = <V extends Value>(\n  editor: TReactEditor<V>,\n  domPoint: DOMPoint,\n  options: Parameters<typeof ReactEditor.toSlatePoint>[2]\n) => {\n  try {\n    return ReactEditor.toSlatePoint(editor as any, domPoint, options);\n  } catch (error) {}\n};\n","import { Value } from '@udecode/slate';\nimport { ReactEditor } from 'slate-react';\n\nimport { TReactEditor } from '../types/TReactEditor';\n\n/**\n * {@link ReactEditor.toSlateRange}\n */\nexport const toSlateRange = <V extends Value>(\n  editor: TReactEditor<V>,\n  domRange: Parameters<typeof ReactEditor.toSlateRange>[1],\n  options: Parameters<typeof ReactEditor.toSlateRange>[2]\n) => {\n  try {\n    return ReactEditor.toSlateRange(editor as any, domRange, options);\n  } catch (error) {}\n};\n","import { getEndPoint, getStartPoint, Value } from '@udecode/slate';\n\nimport { focusEditor } from '../react-editor/index';\nimport { TReactEditor } from '../types/index';\n\n/**\n * Focus an editor edge.\n */\nexport const focusEditorEdge = <V extends Value>(\n  editor: TReactEditor<V>,\n  {\n    edge = 'start',\n  }: {\n    edge?: 'start' | 'end';\n  } = {}\n) => {\n  const target =\n    edge === 'start' ? getStartPoint(editor, []) : getEndPoint(editor, []);\n\n  focusEditor(editor, target);\n};\n"],"mappings":"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","names":["import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate"]}