{"version":3,"sources":["../src/index.ts","../src/PlateElement.tsx","../src/PlateLeaf.tsx","../src/createNodeHOC.tsx","../src/createNodesHOC.tsx","../src/defaultsDeepToNodes.ts","../src/isType.ts","../src/onKeyDownToggleElement.ts","../src/onKeyDownToggleMark.ts","../src/selectEditor.ts","../src/useMarkToolbarButton.ts","../src/usePlaceholder.ts","../src/useRemoveNodeButton.ts"],"sourcesContent":["/**\n * @file Automatically generated by barrelsby.\n */\n\nexport * from './PlateElement';\nexport * from './PlateLeaf';\nexport * from './createNodeHOC';\nexport * from './createNodesHOC';\nexport * from './defaultsDeepToNodes';\nexport * from './isType';\nexport * from './onKeyDownToggleElement';\nexport * from './onKeyDownToggleMark';\nexport * from './selectEditor';\nexport * from './useMarkToolbarButton';\nexport * from './usePlaceholder';\nexport * from './useRemoveNodeButton';\nexport * from './types/index';\n","import React from 'react';\nimport { PlateRenderElementProps } from '@udecode/plate-core';\nimport { Box, BoxProps, useComposedRef } from '@udecode/react-utils';\nimport { EElement, TElement, Value } from '@udecode/slate';\nimport { clsx } from 'clsx';\n\nexport type PlateElementProps<\n  V extends Value = Value,\n  N extends TElement = EElement<V>,\n> = PlateRenderElementProps<V, N> &\n  BoxProps & {\n    /**\n     * Get HTML attributes from Slate element. Alternative to `PlatePlugin.props`.\n     */\n    elementToAttributes?: (element: N) => any;\n  };\n\nexport const usePlateElement = <T extends TElement = TElement>(\n  props: PlateElementProps<Value, T>\n) => {\n  const {\n    editor,\n    attributes,\n    nodeProps,\n    element,\n    elementToAttributes,\n    ...rootProps\n  } = props;\n\n  return {\n    ref: useComposedRef(props.ref, attributes.ref),\n    props: {\n      ...attributes,\n      ...rootProps,\n      ...nodeProps,\n      ...elementToAttributes?.(element as T),\n      className: clsx(props.className, nodeProps?.className),\n    },\n  };\n};\n\n/**\n * Headless element component.\n */\nconst PlateElement = React.forwardRef<HTMLDivElement, PlateElementProps>(\n  (props: PlateElementProps, ref) => {\n    const { ref: rootRef, props: rootProps } = usePlateElement({\n      ...props,\n      ref,\n    });\n\n    return <Box {...rootProps} ref={rootRef} />;\n  }\n) as (<V extends Value = Value, N extends TElement = EElement<V>>(\n  props: PlateElementProps<V, N> & React.RefAttributes<HTMLDivElement>\n) => React.ReactElement) & { displayName?: string };\nPlateElement.displayName = 'PlateElement';\n\nexport { PlateElement };\n","import React from 'react';\nimport { PlateRenderLeafProps } from '@udecode/plate-core';\nimport { Text, TextProps, useComposedRef } from '@udecode/react-utils';\nimport { EText, TText, Value } from '@udecode/slate';\nimport { clsx } from 'clsx';\n\nexport type PlateLeafProps<\n  V extends Value = Value,\n  N extends TText = EText<V>,\n> = PlateRenderLeafProps<V, N> &\n  TextProps & {\n    /**\n     * Get HTML attributes from Slate leaf. Alternative to `PlatePlugin.props`.\n     */\n    leafToAttributes?: (leaf: N) => any;\n  };\n\nexport const usePlateLeaf = <T extends TText = TText>(\n  props: PlateLeafProps<Value, T>\n) => {\n  const {\n    editor,\n    attributes,\n    nodeProps,\n    text,\n    leaf,\n    leafToAttributes,\n    ...rootProps\n  } = props;\n\n  return {\n    ref: useComposedRef(props.ref, (attributes as any).ref),\n    props: {\n      ...attributes,\n      ...rootProps,\n      ...nodeProps,\n      ...leafToAttributes?.(leaf as T),\n      className: clsx(props.className, nodeProps?.className),\n    },\n  };\n};\n\n/**\n * Headless leaf component.\n */\nconst PlateLeaf = React.forwardRef<HTMLSpanElement, PlateLeafProps>(\n  (props: PlateLeafProps, ref) => {\n    const { ref: rootRef, props: rootProps } = usePlateLeaf({ ...props, ref });\n\n    return <Text {...rootProps} ref={rootRef} />;\n  }\n) as (<V extends Value = Value, N extends TText = EText<V>>({\n  className,\n  ...props\n}: PlateLeafProps<V, N> &\n  React.RefAttributes<HTMLSpanElement>) => React.ReactElement) & {\n  displayName?: string;\n};\nPlateLeaf.displayName = 'PlateLeaf';\n\nexport { PlateLeaf };\n","import React from 'react';\nimport { PlateRenderElementProps } from '@udecode/plate-core';\nimport { Value } from '@udecode/slate';\n\nexport const createNodeHOC =\n  <V extends Value, T>(HOC: React.FC<T>) =>\n  (Component: any, props: T) =>\n    function hoc(childrenProps: PlateRenderElementProps<V>) {\n      return (\n        <HOC {...childrenProps} {...props}>\n          <Component {...childrenProps} />\n        </HOC>\n      );\n    };\n","import { AnyObject } from '@udecode/utils';\nimport castArray from 'lodash/castArray.js';\nimport merge from 'lodash/merge.js';\n\nimport { createNodeHOC } from './createNodeHOC';\n\nexport type CreateHOCOptions<T> = Partial<T> &\n  AnyObject & {\n    /**\n     * Set HOC by key.\n     */\n    key?: string;\n\n    /**\n     * Set HOC by key.\n     */\n    keys?: string[];\n  };\n\nconst createHOC = <T,>(withHOC: any) => {\n  return (\n    components: any,\n    options: CreateHOCOptions<T> | CreateHOCOptions<T>[]\n  ) => {\n    const _components = { ...components };\n    const optionsByKey: any = {};\n\n    const optionsList = castArray<CreateHOCOptions<T>>(options);\n\n    optionsList.forEach(({ key, keys, ...opt }) => {\n      const _keys: string[] = key ? [key] : keys ?? Object.keys(_components);\n\n      _keys.forEach((_key) => {\n        optionsByKey[_key] = merge(optionsByKey[_key], opt);\n      });\n    });\n\n    Object.keys(optionsByKey).forEach((key) => {\n      if (!_components[key]) return;\n\n      _components[key] = withHOC(_components[key], optionsByKey[key]);\n    });\n\n    return _components;\n  };\n};\n\n/**\n * Create components HOC by plugin key.\n */\nexport const createNodesHOC = <T,>(HOC: React.FC<T>) => {\n  return createHOC<T>(createNodeHOC(HOC));\n};\n\n/**\n * Create components HOC by plugin key with a custom HOC.\n */\nexport const createNodesWithHOC = <T,>(\n  withHOC: (component: any, props: T) => any\n) => {\n  return createHOC<T>(withHOC);\n};\n","import { applyDeepToNodes, ApplyDeepToNodesOptions } from '@udecode/plate-core';\nimport { TNode } from '@udecode/slate';\nimport defaults from 'lodash/defaults.js';\n\n/**\n * Recursively merge a source object to children nodes with a query.\n */\nexport const defaultsDeepToNodes = <N extends TNode>(\n  options: Omit<ApplyDeepToNodesOptions<N>, 'apply'>\n) => {\n  applyDeepToNodes({ ...options, apply: defaults });\n};\n","import { getPluginType, PlateEditor } from '@udecode/plate-core';\nimport { Value } from '@udecode/slate';\nimport castArray from 'lodash/castArray.js';\n\n/**\n * Does the node match the type provided.\n */\nexport const isType = <V extends Value>(\n  editor: PlateEditor<V>,\n  node: any,\n  key?: string | string[]\n) => {\n  const keys = castArray(key);\n  const types: string[] = [];\n\n  keys.forEach((_key) => types.push(getPluginType(editor, _key)));\n\n  return types.includes(node?.type);\n};\n","import {\n  ELEMENT_DEFAULT,\n  getPluginType,\n  HotkeyPlugin,\n  isHotkey,\n  KeyboardHandlerReturnType,\n  PlateEditor,\n  toggleNodeType,\n  WithPlatePlugin,\n} from '@udecode/plate-core';\nimport { Value } from '@udecode/slate';\nimport castArray from 'lodash/castArray.js';\n\nexport const onKeyDownToggleElement =\n  <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(\n    editor: E,\n    { type, options: { hotkey } }: WithPlatePlugin<HotkeyPlugin, V, E>\n  ): KeyboardHandlerReturnType =>\n  (e) => {\n    if (e.defaultPrevented) return;\n\n    const defaultType = getPluginType(editor, ELEMENT_DEFAULT);\n\n    if (!hotkey) return;\n\n    const hotkeys = castArray(hotkey);\n\n    for (const _hotkey of hotkeys) {\n      if (isHotkey(_hotkey, e as any)) {\n        e.preventDefault();\n        toggleNodeType(editor, {\n          activeType: type,\n          inactiveType: defaultType,\n        });\n        return;\n      }\n    }\n  };\n","import {\n  isHotkey,\n  KeyboardHandlerReturnType,\n  PlateEditor,\n  ToggleMarkPlugin,\n  WithPlatePlugin,\n} from '@udecode/plate-core';\nimport { Value } from '@udecode/slate';\nimport { toggleMark } from '@udecode/slate-utils';\n\nexport const onKeyDownToggleMark =\n  <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(\n    editor: E,\n    {\n      type,\n      options: { hotkey, clear },\n    }: WithPlatePlugin<ToggleMarkPlugin, V, E>\n  ): KeyboardHandlerReturnType =>\n  (e) => {\n    if (e.defaultPrevented) return;\n    if (!hotkey) return;\n\n    if (isHotkey(hotkey, e as any)) {\n      e.preventDefault();\n\n      toggleMark(editor, { key: type as any, clear });\n    }\n  };\n","import { getEndPoint, getStartPoint, select, Value } from '@udecode/slate';\nimport { focusEditor, TReactEditor } from '@udecode/slate-react';\nimport { Location } from 'slate';\n\nexport interface SelectEditorOptions {\n  /**\n   * Specific location if edge is not defined.\n   */\n  at?: Location;\n\n  /**\n   * Start or end of the editor.\n   */\n  edge?: 'start' | 'end';\n\n  /**\n   * If true, focus the React editor before selecting.\n   */\n  focus?: boolean;\n}\n\n/**\n * Select an editor at a target or an edge (start, end).\n */\nexport const selectEditor = <V extends Value>(\n  editor: TReactEditor<V>,\n  { at, edge, focus }: SelectEditorOptions\n) => {\n  if (focus) {\n    focusEditor(editor);\n  }\n\n  let location = at as Location;\n\n  if (edge === 'start') {\n    location = getStartPoint(editor, []);\n  }\n\n  if (edge === 'end') {\n    location = getEndPoint(editor, []);\n  }\n\n  if (location) {\n    select(editor, location);\n  }\n};\n","import { useEditorRef, useEditorSelector } from '@udecode/plate-core';\nimport { isMarkActive, toggleMark } from '@udecode/slate-utils';\n\nexport const useMarkToolbarButtonState = ({\n  nodeType,\n  clear,\n}: {\n  nodeType: string;\n  clear?: string | string[];\n}) => {\n  const pressed = useEditorSelector(\n    (editor) => isMarkActive(editor, nodeType),\n    [nodeType]\n  );\n\n  return {\n    pressed,\n    nodeType,\n    clear,\n  };\n};\n\nexport const useMarkToolbarButton = (\n  state: ReturnType<typeof useMarkToolbarButtonState>\n) => {\n  const editor = useEditorRef();\n\n  return {\n    props: {\n      pressed: state.pressed,\n      onMouseDown: (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n      },\n      onClick: () => {\n        toggleMark(editor, { key: state.nodeType, clear: state.clear });\n      },\n    },\n  };\n};\n","import { useEditorRef } from '@udecode/plate-core';\nimport {\n  isCollapsed,\n  isElementEmpty,\n  queryNode,\n  QueryNodeOptions,\n} from '@udecode/slate';\nimport { findNodePath } from '@udecode/slate-react';\nimport { useFocused, useSelected } from 'slate-react';\n\nimport { PlateElementProps } from './index';\n\nexport interface PlaceholderProps extends PlateElementProps {\n  placeholder: string;\n  hideOnBlur?: boolean;\n  query?: QueryNodeOptions;\n}\n\nexport const usePlaceholderState = ({\n  hideOnBlur = true,\n  query,\n  element,\n}: PlaceholderProps) => {\n  const focused = useFocused();\n  const selected = useSelected();\n  const editor = useEditorRef();\n\n  const isEmptyBlock = isElementEmpty(editor, element);\n\n  const enabled =\n    isEmptyBlock &&\n    (!query || queryNode([element, findNodePath(editor, element)!], query)) &&\n    (!hideOnBlur ||\n      (isCollapsed(editor.selection) && hideOnBlur && focused && selected));\n\n  return {\n    enabled,\n  };\n};\n","import { useEditorRef } from '@udecode/plate-core';\nimport { removeNodes, TElement } from '@udecode/slate';\nimport { findNodePath } from '@udecode/slate-react';\n\nexport const useRemoveNodeButton = ({ element }: { element: TElement }) => {\n  const editor = useEditorRef();\n\n  return {\n    props: {\n      onMouseDown: (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n      },\n      onClick: () => {\n        const path = findNodePath(editor, element);\n\n        removeNodes(editor, { at: path });\n      },\n    },\n  };\n};\n"],"mappings":"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","names":["React","import_react","import_react_utils","import_clsx","React","import_react","React","castArray","merge","defaults","import_plate_core","import_castArray","castArray","import_plate_core","import_castArray","castArray","import_plate_core","import_plate_core","import_slate_utils","import_plate_core","import_slate","import_slate_react","import_plate_core","import_slate","import_slate_react"]}