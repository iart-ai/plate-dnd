var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/PlateElement.tsx
import React from "react";
import { Box, useComposedRef } from "@udecode/react-utils";
import { clsx } from "clsx";
var usePlateElement = (props) => {
  const _a = props, {
    editor,
    attributes,
    nodeProps,
    element,
    elementToAttributes
  } = _a, rootProps = __objRest(_a, [
    "editor",
    "attributes",
    "nodeProps",
    "element",
    "elementToAttributes"
  ]);
  return {
    ref: useComposedRef(props.ref, attributes.ref),
    props: __spreadProps(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, attributes), rootProps), nodeProps), elementToAttributes == null ? void 0 : elementToAttributes(element)), {
      className: clsx(props.className, nodeProps == null ? void 0 : nodeProps.className)
    })
  };
};
var PlateElement = React.forwardRef(
  (props, ref) => {
    const { ref: rootRef, props: rootProps } = usePlateElement(__spreadProps(__spreadValues({}, props), {
      ref
    }));
    return /* @__PURE__ */ React.createElement(Box, __spreadProps(__spreadValues({}, rootProps), { ref: rootRef }));
  }
);
PlateElement.displayName = "PlateElement";

// src/PlateLeaf.tsx
import React2 from "react";
import { Text, useComposedRef as useComposedRef2 } from "@udecode/react-utils";
import { clsx as clsx2 } from "clsx";
var usePlateLeaf = (props) => {
  const _a = props, {
    editor,
    attributes,
    nodeProps,
    text,
    leaf,
    leafToAttributes
  } = _a, rootProps = __objRest(_a, [
    "editor",
    "attributes",
    "nodeProps",
    "text",
    "leaf",
    "leafToAttributes"
  ]);
  return {
    ref: useComposedRef2(props.ref, attributes.ref),
    props: __spreadProps(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, attributes), rootProps), nodeProps), leafToAttributes == null ? void 0 : leafToAttributes(leaf)), {
      className: clsx2(props.className, nodeProps == null ? void 0 : nodeProps.className)
    })
  };
};
var PlateLeaf = React2.forwardRef(
  (props, ref) => {
    const { ref: rootRef, props: rootProps } = usePlateLeaf(__spreadProps(__spreadValues({}, props), { ref }));
    return /* @__PURE__ */ React2.createElement(Text, __spreadProps(__spreadValues({}, rootProps), { ref: rootRef }));
  }
);
PlateLeaf.displayName = "PlateLeaf";

// src/createNodeHOC.tsx
import React3 from "react";
var createNodeHOC = (HOC) => (Component, props) => function hoc(childrenProps) {
  return /* @__PURE__ */ React3.createElement(HOC, __spreadValues(__spreadValues({}, childrenProps), props), /* @__PURE__ */ React3.createElement(Component, __spreadValues({}, childrenProps)));
};

// src/createNodesHOC.tsx
import castArray from "lodash/castArray.js";
import merge from "lodash/merge.js";
var createHOC = (withHOC) => {
  return (components, options) => {
    const _components = __spreadValues({}, components);
    const optionsByKey = {};
    const optionsList = castArray(options);
    optionsList.forEach((_a) => {
      var _b = _a, { key, keys } = _b, opt = __objRest(_b, ["key", "keys"]);
      const _keys = key ? [key] : keys != null ? keys : Object.keys(_components);
      _keys.forEach((_key) => {
        optionsByKey[_key] = merge(optionsByKey[_key], opt);
      });
    });
    Object.keys(optionsByKey).forEach((key) => {
      if (!_components[key])
        return;
      _components[key] = withHOC(_components[key], optionsByKey[key]);
    });
    return _components;
  };
};
var createNodesHOC = (HOC) => {
  return createHOC(createNodeHOC(HOC));
};
var createNodesWithHOC = (withHOC) => {
  return createHOC(withHOC);
};

// src/defaultsDeepToNodes.ts
import { applyDeepToNodes } from "@udecode/plate-core";
import defaults from "lodash/defaults.js";
var defaultsDeepToNodes = (options) => {
  applyDeepToNodes(__spreadProps(__spreadValues({}, options), { apply: defaults }));
};

// src/isType.ts
import { getPluginType } from "@udecode/plate-core";
import castArray2 from "lodash/castArray.js";
var isType = (editor, node, key) => {
  const keys = castArray2(key);
  const types = [];
  keys.forEach((_key) => types.push(getPluginType(editor, _key)));
  return types.includes(node == null ? void 0 : node.type);
};

// src/onKeyDownToggleElement.ts
import {
  ELEMENT_DEFAULT,
  getPluginType as getPluginType2,
  isHotkey,
  toggleNodeType
} from "@udecode/plate-core";
import castArray3 from "lodash/castArray.js";
var onKeyDownToggleElement = (editor, { type, options: { hotkey } }) => (e) => {
  if (e.defaultPrevented)
    return;
  const defaultType = getPluginType2(editor, ELEMENT_DEFAULT);
  if (!hotkey)
    return;
  const hotkeys = castArray3(hotkey);
  for (const _hotkey of hotkeys) {
    if (isHotkey(_hotkey, e)) {
      e.preventDefault();
      toggleNodeType(editor, {
        activeType: type,
        inactiveType: defaultType
      });
      return;
    }
  }
};

// src/onKeyDownToggleMark.ts
import {
  isHotkey as isHotkey2
} from "@udecode/plate-core";
import { toggleMark } from "@udecode/slate-utils";
var onKeyDownToggleMark = (editor, {
  type,
  options: { hotkey, clear }
}) => (e) => {
  if (e.defaultPrevented)
    return;
  if (!hotkey)
    return;
  if (isHotkey2(hotkey, e)) {
    e.preventDefault();
    toggleMark(editor, { key: type, clear });
  }
};

// src/selectEditor.ts
import { getEndPoint, getStartPoint, select } from "@udecode/slate";
import { focusEditor } from "@udecode/slate-react";
var selectEditor = (editor, { at, edge, focus }) => {
  if (focus) {
    focusEditor(editor);
  }
  let location = at;
  if (edge === "start") {
    location = getStartPoint(editor, []);
  }
  if (edge === "end") {
    location = getEndPoint(editor, []);
  }
  if (location) {
    select(editor, location);
  }
};

// src/useMarkToolbarButton.ts
import { useEditorRef, useEditorSelector } from "@udecode/plate-core";
import { isMarkActive, toggleMark as toggleMark2 } from "@udecode/slate-utils";
var useMarkToolbarButtonState = ({
  nodeType,
  clear
}) => {
  const pressed = useEditorSelector(
    (editor) => isMarkActive(editor, nodeType),
    [nodeType]
  );
  return {
    pressed,
    nodeType,
    clear
  };
};
var useMarkToolbarButton = (state) => {
  const editor = useEditorRef();
  return {
    props: {
      pressed: state.pressed,
      onMouseDown: (e) => {
        e.preventDefault();
      },
      onClick: () => {
        toggleMark2(editor, { key: state.nodeType, clear: state.clear });
      }
    }
  };
};

// src/usePlaceholder.ts
import { useEditorRef as useEditorRef2 } from "@udecode/plate-core";
import {
  isCollapsed,
  isElementEmpty,
  queryNode
} from "@udecode/slate";
import { findNodePath } from "@udecode/slate-react";
import { useFocused, useSelected } from "slate-react";
var usePlaceholderState = ({
  hideOnBlur = true,
  query,
  element
}) => {
  const focused = useFocused();
  const selected = useSelected();
  const editor = useEditorRef2();
  const isEmptyBlock = isElementEmpty(editor, element);
  const enabled = isEmptyBlock && (!query || queryNode([element, findNodePath(editor, element)], query)) && (!hideOnBlur || isCollapsed(editor.selection) && hideOnBlur && focused && selected);
  return {
    enabled
  };
};

// src/useRemoveNodeButton.ts
import { useEditorRef as useEditorRef3 } from "@udecode/plate-core";
import { removeNodes } from "@udecode/slate";
import { findNodePath as findNodePath2 } from "@udecode/slate-react";
var useRemoveNodeButton = ({ element }) => {
  const editor = useEditorRef3();
  return {
    props: {
      onMouseDown: (e) => {
        e.preventDefault();
      },
      onClick: () => {
        const path = findNodePath2(editor, element);
        removeNodes(editor, { at: path });
      }
    }
  };
};
export {
  PlateElement,
  PlateLeaf,
  createNodeHOC,
  createNodesHOC,
  createNodesWithHOC,
  defaultsDeepToNodes,
  isType,
  onKeyDownToggleElement,
  onKeyDownToggleMark,
  selectEditor,
  useMarkToolbarButton,
  useMarkToolbarButtonState,
  usePlaceholderState,
  usePlateElement,
  usePlateLeaf,
  useRemoveNodeButton
};
//# sourceMappingURL=index.mjs.map